- nodes = paginate_scope(local_assigns[:nodes])
- more_link = local_assigns[:more_link]
- container = local_assigns[:container]

%table.main
  %thead
    %tr
      %th(colspan="3")
      %th(colspan="5")
        Resources
    %tr
      %th.status
      %th.hostname
        Hostname
      - unless container.nil?
        %th Source
      %th.latest_report.desc
        &darr; Latest report
      %th
        All
      %th
        Failed
      %th
        Pending
      %th
        Changed
      %th
        Unchanged
  %tbody
    - if nodes.present?
      - nodes.sort {|a,b| (b.reported_at || Time.at(0)) <=> (a.reported_at || Time.at(0))}.each do |node|
        - sources = container.nodes_with_sources[node] unless container.nil?
        %tr[node]{:class => "#{'active' if node == @node}"}
          %td.status{:class => node.status_class}
            %span{:title => node_title_text(node)}
              = node_status_icon(node)
          %td.hostname
            = link_to h(node.name), node
          - unless container.nil?
            %td
              - if sources.include?(container)
                = node.name
              - else
                = sources.map{|s| link_to(s.name,s)}.join(", ")
          %td.latest_report
            = node.last_apply_report ? node.last_apply_report.time : "Has not reported"
          - ["total", "failed", "pending", "changed", "unchanged"].each do |status|
            %td
              = node.last_apply_report.metric_value("resources", status).to_i
    - else
      %td.empty{:colspan => container.nil? ? 8 : 9}
        = describe_no_matches_for :nodes
  %tfoot
    %tr
      %td{:colspan => container.nil? ? 8 : 9 }
        = pagination_for nodes, more_link
